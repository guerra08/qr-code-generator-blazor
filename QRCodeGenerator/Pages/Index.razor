@page "/"
@using QRCodeGenerator.Models
@using QRCoder

<div class="title-container">
    <h1 style="text-align: center">QR Code Generator</h1>
    <h3 style="text-align: center">Generate a QR code using whatever text data you want😀</h3>
    <h4 style="text-align: center">Simply add pairs of titles and data and generate the QR code.</h4>
</div>

@if (_image is null)
{
    <div class="form-container">
        <EditForm Model="@_entries" OnValidSubmit="@GenerateQrCode">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            @if (_entries.Count == 0)
            {
                <div class="form-row add-button">
                    <button type="button" class="btn btn-secondary" @onclick="@(AddEntry)">Start</button>
                </div>
            }
            @for (var i = 0; i < _entries.Count; i++)
            {
                var index = i;

                <div class="form-row">
                    <div class="form-group col-md-6">
                        <InputText id="key" class="form-control" placeholder="Key" @bind-Value="_entries[index].Key" required/>
                    </div>
                    <div class="form-group col-md-6">
                        <InputText id="value" class="form-control" type="text" placeholder="Value" @bind-Value="_entries[index].Value" required/>
                    </div>
                    <div class="form-group col-md-6">
                        <button type="button" class="btn btn-warning" @onclick="@(() => RemoveEntry(index))">Remove data</button>
                    </div>
                </div>
            }
            @if (_entries.Count > 0)
            {
                <div class="form-buttons">
                    <button type="submit" class="btn btn-primary">Generate</button>
                    <button type="reset" class="btn btn-danger">Clear</button>
                </div>
            }
        </EditForm>
    </div>
}

@if (_image is not null && _entries.Count > 0)
{
    <div class="card-qr-container">
        <div class="qr-container">
            <img src="data:image/png;base64,@Convert.ToBase64String(_image)" alt="QR Code">
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                @foreach (var entry in _entries)
                {
                    <p class="card-text">
                        <strong>@entry.Key:</strong> @entry.Value
                    </p>
                }
            </div>
        </div>
        <button type="reset" class="btn btn-danger" @onclick="@(ClearQrCode)">Clear</button>
    </div>
}

@code
{

    private readonly List<FormModel> _entries = new();
    private byte[]? _image;

    private void GenerateQrCode()
    {
        var qrGenerator = new QRCodeGenerator();
        var qrData = qrGenerator.CreateQrCode(
            BuildQrCodeString(),
            QRCodeGenerator.ECCLevel.Q);
        var qrCode = new PngByteQRCode(qrData);
        _image = qrCode.GetGraphic(20);
    }
    
    private void ClearQrCode()
    {
        _entries.Clear();
        _image = null;
    }

    private void RemoveEntry(int index)
    {
        _entries.RemoveAt(index);
    }

    private void AddEntry()
    {
        _entries.Add(new FormModel());
    }

    private string BuildQrCodeString()
    {
        return string.Join("", _entries);
    }

}